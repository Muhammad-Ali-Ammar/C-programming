-- object = instance 
-- declaration = template = pattern



	struct student 
	{
	int id;
	};



		int main ()
		{

		struct student a1; // msh zy al c++ , student a1;
		}


---------------------------------------------------------------------

	typdef struct student
	{

	int id;
	float y;

	}ST;  // note that it can be the same name , but it's not advisable 


int main ()
{

ST a1;   // back to c++ :) 



ST a2={5,7.5};

ST *ptr =&a1;
ptr->id = 5; // = (*ptr).id  ,, lazem () 3shan . is higher prioirty 

struct student a3; // stil works fine 

}

-----------------------------------------------------------------------
•• struct = can store heterogeneous = non-hemogenous ( غير متجانسة)
---------------------------------------------------------------------

••Structure is not a variable declaration, but a type declaration. 
---------------------------------------------------------------------
•• the only way to access all elements in on line at initialization only 
	student a2={5,7.5};
-----------------------------------------------------------------------

•• static can't be used inside struct ( ynf3 fe c++ not c ) 
-----------------------------------------------------------------------

----------------------------------------------------------------------------

	############### struct arthmetic ###################

	1- you can use = to copy 2 objects ( same struct)
	
		anything else = error 
		
	-- can't do if(s1 ==s2 ) ,, must be element by element
	-- can't do s1+s2 	

---------------------------------------------------------------------
•• lma bt3ml struct = declaration ==> ma7gztsh mkaan fel memory lesa ,,( mugard al .text bs )  
	lma bt3ml definition lel obecjt , kda byb2a y7gz fel memory 
---------------------------------------------------------------------
	############## size of structre ##############
	
•• 2 rules for storing 
	-- variables would be stored at addresses which is multiplication of it's data type size 
			int = 4 bytes ,, it's stored form 0 or 4 or 8 or 12 
			char = 1 byte ,, it's stoed form 0 or 1 or 2 or 3 ... 
			double = 8 bytes , it's stored from 8 , 16  ((( 5lii balk )) 
			
	-- size wll be equal to the multiplicative of the size of the largest element  ((mohem gden )


		strcut student
		{
			char x; // byte 0 0 0    // 7sb al word size 
			int y;  // byte byte byte byte
		};
		
	// 4+4 = 8 bytes
	
********* Example 2 ****************

	strcut student
	{
			char x; // byte 0 0 0  (padding)
			int y;  // byte byte byte byte
			char z // byte 0 0 0 0
	};


  //3*4 = 12;



the solution is to sort them descending or ascending ,, bs 5leeha mn higher to lower 

		strcut student
	{
			char x; 
			char z;  // x z 0 0 
			int y;  // byte byte byte byte

	};

	// 4+4 = 8 bytes 
	

Note that : 1- multiplicative of the largest type

	struct lel
	{

			char x;  // size = 1 
	low kan char x,y; // size = 2 
	low kan char x,y,z; // size = 3 3adii 5als 
	low kan short x; // size = 2 
	low kan char x; double y;  // size = 16 (( 5liiiii baaaaaaaalk )) 
				3shan char a5d mkan 0 ,, double hybd2 feeh 8 to 16 ,, 3shan kda ascending or desceding 
	
	low kan char x; double z; int y; // start at 0 ,, 8-->16 , 17-->20 = not 20 bytes !!!!! ,, 
									// multiplication of largest size = 24 ,, hyb2a fe pading after int 
	
	
		note that : int arr[2]; // largest type still int not 2*int 
	}s1;

 
		 2- #pragma pack(1) ,, m3naha kol type yt7d fe muda3fat al 1 or __attribute__  ((bttdaf b3d al ism ))
			#pragma pack(2) ,, m3naha kol type yt7d fe muda3fat al 2 
			#pragma pack( muda3fat al 2 ,, 3 = warining ) 
			
			#pragma pack(2)
			struct 
			{
				char x;  // 0
				double y; // 2 -> 9
				int z ;   //10--14
				// so size is 14

			}s1;


---------------------------------------------------------------------
	
 1- can we define a variable of struct inside itself as a member ? 
  -- No  ,, lsa msh 3arf al size , ( int , char , struct---> ally howa (int ,char , struct --> ally howa w hakza , overflow))
 
 2- can we define a  pointer to struct inside itself as a member ? 
  -- Yes ,, l2n al size bta3 al pointer ma3roof ( daymn sabt lel architecture ) 
	  and it's called self-referntial structure as used in linked list 
  
 3- can we define a variable of struct as member of another struct  ? 
  -- yes , bs lazm tkon t7tha 
 
 
 4- •• you can't assign value to members inside the declaration 

 
 struct student
 {
	int x = 5;  // error , la2n howa ma t7gzsh fel memory aslun ,, lazem b3d declarition 
 };

5- structure declaration can be global ( accessible by all), local scope ( accessible by particular function ) 
 
---------------------------------------------------------------------

#################### nested struct ####################

1- 
		typedef struct student
		{
			int x;       
			char ch;
			char name[10];

			struct grades
			{
				int z;
			}grade;

		} ST;






		int main()

		{
			  ST s1;

			  s1.grade.z = 5;
			  
			  strcpy(s1.name,"ahmed"); // msh haynf3 tma3 s1.name="ahmed";

		}
		
2- or t3ml struct bara , we second struct yb2a feeh member of the first 

------------------------------------------------------------------------------------------------------------------------------------------
 
 -- struct 3obara al bytes kolaha wara b3d in memory 

	typedef struct ST
	{
		char x ;
		char y;
	} ST;
	
	
	ST s={2,1}; 
	printf("%d",s); // %d = 4 byte wara b3d 
					// prints 258 ,, 0000 0001 0000 0002
					
	
		typedef struct ST
		{
		int x ;
		int y;
		} ST;
	
			ST s={2,1};
		
		printf("%d",s); // print 2 only ( 4 byte tmam ) 
		
		printf("%lld",*(long long int*)&s);  //8 bytes = 2 int =  0x00000001 00000002 ( in decimal)
	
	


###########################################################################################################################################################


############ how to access member of structure wzout dot ########

-- struct 3obara al bytes kolaha wara b3d in memory 

-- inta momkn t3ml cast al struct 3obara 3n char (1 byte) ,, fa bt3rf tmshii byte byte 
	b3d ma btwsl lel byte , bt3mlo cast ,, to int 3shan yt3aml 3ala ino 4 byte 3ala b3d 


	#pragma pack(1)  // cancel al alignment now 

	typedef struct student
	{
		char ch1;   // 1 byte start with 0
		char ch2;  // 1 byte start with 1
		int x;    //  4 byte start with 2 , ends with (4+2-1)
		float y;  //  4 byte start with 6  ( 4+2 )
	} ST;



	int main()

	{
		ST s1;

		*((char *)( ((char * ) &s1)+0))='a';
		*((char *)( ((char * ) &s1)+1))='b';
		*((int *)( ((char * ) &s1)+2))=10;
		*((float *)( ((char * ) &s1)+6))=7.056978;

		printf("%c\n%c\n",s1.ch1,s1.ch2);
		cout(s1.x);
		printf("%f",s1.y);



	}  
	
############################################################################################################################

-- creating pointer to function inside the struct = class 
-- you can't create a normal function 


		typedef struct ST
		{
			int x ;
			int y;
			void func(int y);  // Error
		} ST;



	••••
			
	 typedef struct ST
		{
			int x ;
			int y;
			void (*ptr) (int y);
		} ST;

		void func (int y) {	printf("hello world\n");}

		int main()

		{

			ST s1;
			s1.ptr=func;
			s1.ptr(5);
		}


############################################################################################################################
-- What is anonmous structe ? 
	•• structue without a name ( tag) 
	
	
	struct
	{
		int g;
	} obj1;  // just create 1 object of it 
	
	

-- without name , you can't create any object, pointless but legal 3adi 
		it can be used in union only 

############################################################################################################################

-- global object : kol al elements = 0 
-- local object : kol al elements = garabge

############################################################################################################################
-- self-referntial structure

typedef struct st
{
	int x ;
	struct st *ptr; // self-referntial structure
	
}student;


// that's used in linked list 


-- note that :
	student* can't be used instead of struct st *ptr ;.. lesa ma shafhaaash 
############################################################################################################################

-- 7awel fe ay program , tstd5m structure 
	
	typedef struct
	{
		int x,y;
	}POINT;
	
	
	typedef struct
	{
		POINT upper_left, lower_right;
	}rectangle;

############################################################################################################################

-- struct student
	{
			int x;
	};
	
	struct student *ptr= malloc(sizeof(struct student))
	if(ptr==0) {printf("no memory "); return 0;}
	
############################################################################################################################

typedef struct ST
{
    int x;
    int y;
} ST;




int main()
{

ST s = { .y=5};

cout(s.y);

cout(s.x);

}



//////////////////////////////////////////////////////////////////
in c programming, FILE of which data type
1- char* 
2- int 
3- struct 


answer : struct