-- 1d array = vector 

-- how to send array by value ? 
	 by sending object of struct 
	 
-- how to copy 2 array using = ? 
	using struct and its member is an array ,, obj1 = obj2 
	

--	it's Random access = direct access implies the ability to access any entry in a array in constant time 
		(independent of its position in the array and of array's size). And that is big advantage than linkedlist O(n)x`
		


####################################################################################################################################
-- al array fel intialization , extra element is ignored , some of compiler error like turbo c , others ignore it 
	but you can add extra elements after intialization (not a good idea at all , da mn 3yoob al c , no range checking)

   int x[3]={1,2,3,4};   // 4 is extra,, msh hay5od beeha,, 
   int y[3]={1,2,3};

   y[3]=4;   			// hy7od 4 zyada 3adii ,, bs lw dii kant a5r mkaan fel memory hycrash 
   cout(x[3]);			// zero 
   cout(y[3]);	   		// 4 
   cout(y[4]);           // garbage
   
   
  cout(sizeof(x)/4); 	// 3 not 4 
  cout(sizeof(x)/4); 	// still 3,, nta mugard 3mlt access le 7ta zyada msh bta3tk , msh m3na kda in size = 4 
  
  


-- watch oouttt


	int arr[3]={1,2,3};
	
	int y = 6;
	
	arr[3]=10;
	
	cout(y); // 10 ,, 3ml overwrite 
	
	
	
	
   int x[3]={1,2,3,4};

    int y = 6;
    x[3]=10;
    cout(y);   
	
	
	// 4 is ignored , still 3 elements , 
		// will overwrite again , prints 10 not 6

	
####################################################################################################################################

-- intialize array with size 100 ,, and the 50th element is 50 ( in one line)
	

	int arr[100]={[49]=50 , [56]=57};
	
-- intialize array and number from 50 to 55 is 6 
	
	int arr[100] = { [49...54] = 6 };
####################################################################################################################################
-- The C99 standard allows variable sized arrays = Variable Length Arrays = VLA 
	int size = 5 ; 
	int arr[size ];
	
####################################################################################################################################
-- 2d array 
	
	*(*(arr+0)+1)
	
	*(*(arr+R0)+C1)
	*(*(arr+R1)+C2)


####################################################################################################################################
	
-- pass 2d array ,, coloumn must be known

	void fun ( int arr[][6]) ; 
	void fun (int (*arr) [6] ) ;
	

-- any order higher than 1d, the dimensions must be known 
	
	int arr[][known][known]...[knowns] 
	
####################################################################################################################################	

-- dynamic allocation --> msh hat3rf tgeeb al size 
	int *ptr =malloc(5*sizeof(int));
	
	int x = sizeof(ptr)/sizeof(ptr[0]) ;// doesn't work , because sizeof ptr is 8 ( size of pointer ) not 20 
	

	
####################################################################################################################################


int main()

{
    int arr[2][3]=
        { {1,2,3},
          {4,5,6}
        };

   int **ptr= arr;   // error or warning , arr is pointer to array of pointer 
   int *ptr = arr;   // address of arr = 2293296,, kda weslt le arr[0],, tmaam 3adii , hatmshi wa7da wa7da 
  
   cout(arr+1);       // 2293296 + 3*4 =2293308
   cout(ptr+1);		 // 2293296 + 4 = 2293300 
   cout(arr[0]+1);  // 2293296 + 4 = 2293300 
   
   // pointer increment element , 
   // arr+1 means next row 
   
   
   
   int (*ptr2)[3]=arr; // kda ba2a shabh al arr ,, +1 = next row  
					  // step = 3 elements  


}


####################################################################################################################################

-- how to create Non-Homogenous array = array with different data types 

	•• create array of union 
	
	
	union data {
		int I_data ; 
		float F_data ;
		char * c_data;
	
	};



	union data arr[100];
	
	arr[0].I_data = 5;
	arr[1].F_data = 6.5;
		
	// kda first element integer 
	// second element flaot 
	
####################################################################################################################################
-- no range checking 
	arr[-1];
	arr[-2]; 
	arr[max+2]; 
	
	kol da 3adii tmaam 
	
####################################################################################################################################
	
-- dynamic allocation --> msh hat3rf tgeeb al size 
	int *ptr =malloc(5*sizeof(int));
	
	int x = sizeof(ptr)/sizeof(ptr[0]) ;// doesn't work , because sizeof ptr is 8 ( size of pointer ) not 20 
	
	
-- dynamic allocation in <stdlib.h>
	
####################################################################################################################################

-- in static allocation 
	•• size is the worst case size 
	•• size can't be changed in run-time 


####################################################################################################################################

-- size of array can't be variable ,, must be known before running time 
	
	int x=5;
	int arr[x]; // error ,, compile error 
	

####################################################################################################################################

-- int arr[2][3] ; 

	kda m3naha 2 arrays ,, kol array feeha 3 elements 
	
	
	
####################################################################################################################################

    int a =4,b=5;
    int arr[5]={ (cin>>a), (cin>>b)};

    cout(arr[0]);
	
	
	
	// Error ,,, intialization fel compile time 
	cin fel run-time (after loading stage )  ... lma yegii w2t al compile hy7od a fel memory ? 
	
	
####################################################################################################################################

-- create 2d-array 3x4
	array of pointer ,, kol pointer shayel 4 int 

	(•) ----------
				 |
				 v
				 
				(•   •  •  •)
	
	
	•  ----------
				|
				v
	•			
				•   •  •  •
				
				•   •  •  •
				
				•   •  •  •
	
	int **ptr = (int **) malloc(3 * sizeof(int*)); // 3add al ngooom aktr mn sizeof ,, l2n howa byrg3 3nwaan  
	
	
	for(int i = 0;i<3;++i)
	{
		ptr[i]=(int*) malloc(4*sizeof(int));   // 3add al ngooom aktr mn sizeof ,, l2n howa byrg3 3nwaan 
	}
	
	// in this method that the data in the "two dimensional array" is contiguous in memory.
	
-- another example 
	
	#define col 4
	
	int row = 3;
	
	int (*ptr)[col] = malloc(row*col*sizeof(int)); 


	
	
####################################################################################################################################

-- 3d-array 
	short Arr[2][2][2]={{{1,2},{3,4}}, {{5,6},{7,8}}}
	short arr[page/plane] [row][colum] ;
	short arr[2][2][2]={1,2,3,4,5,6,7,8,9};
	

####################################################################################################################################

-- what's jagged array? 

	array of pointers each pointer points to different size of element 
	
	2d-array bs 2wl row = 4 elements , second row = 6 elements ( see the 2d array pdf )
	
	•• static 2d-array is better in locality of reference 
	   jagged array is better in felxibity 
####################################################################################################################################

-- equation to convert 2d to 1d 
	
	arr+ (i*col+j)
	
	for(int i = 0;i<row;++i)
		for(int j = 0; j<col;++j)
			
			cout(  *(arr+ (i*col+j) ) );
	   
####################################################################################################################################


int arr[3][3] = { {1,2,3},
				  {4,5,6},
				  {7,8,9}};
				  
				  
		// in memory, 123456789
		
    arr[0][3]=3; // now, 123356789 , no range checking and it's the evidance that stored sequentially in mem 

    cout(arr[1][0]);  // 3 not 4 
		

####################################################################################################################################

-- memcpy ... (dest,source,size_in_bytes) 

	 int arr[]={1,2,3,4,5};
     int arr2[5];
    memcpy(arr2,arr,5*sizeof(int));

    for(int i = 0; i<5;++i)
        cout(arr2[i]);
